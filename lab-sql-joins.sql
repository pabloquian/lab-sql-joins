
-- Challenge - Joining on multiple tables
-- Write SQL queries to perform the following tasks using the Sakila database:

-- 1. List the number of films per category.
USE sakila;
SELECT c.name AS category_name, COUNT(f_c.film_id) AS count_film
FROM film_category f_c
JOIN category c
USING (category_id)
GROUP BY c.name;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT s.store_id, ci.city, co.country
FROM store s
JOIN address a
USING (address_id)
JOIN city ci
USING (city_id)
JOIN country co
USING (country_id);

-- 3. Calculate the total revenue generated by each store in dollars.
SELECT store_id, SUM(amount) AS total_revenue
FROM payment p
JOIN rental r
USING (rental_id)
JOIN staff 
ON staff.staff_id=r.staff_id
JOIN store
USING (store_id)
GROUP BY store_id;

-- 4. Determine the average running time of films for each category.
SELECT c.name, ROUND(AVG(f.length),1) AS avg_duration
FROM film f
JOIN film_category fc
USING (film_id)
JOIN category c
USING (category_id)
GROUP BY c.name;

-- Bonus:
-- 5. Identify the film categories with the longest average running time.
-- I will display the top 5 categories with longest average running time.
SELECT c.name, ROUND(AVG(f.length),1) AS avg_duration
FROM film f
JOIN film_category fc
USING (film_id)
JOIN category c
USING (category_id)
GROUP BY c.name
ORDER BY avg_duration DESC
LIMIT 5;

-- 6. Display the top 10 most frequently rented movies in descending order.
SELECT f.title, COUNT(rental_id) AS rental_count
FROM rental r
JOIN inventory i
USING (inventory_id)
JOIN film f
USING (film_id)
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT store_id,
CASE 
WHEN f.title="Academy Dinosaur"=1 THEN "Academy Dinosaur"
ELSE "Some other film"
END AS film_check
FROM store s
JOIN inventory i
USING (store_id)
JOIN film f
USING (film_id)
WHERE store_id =1 AND film_check="Academy Dinosaur";

# It can be rented from Store 1 and 2, but we can not be sure that there is a copy available for renting.
# All we know is that is has been rented in those 2 stores.


-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT DISTINCT f.title, 
CASE
WHEN i.film_id IN (f.film_id) THEN "Available"
ELSE "Not Available"
END AS "status"
FROM film f
LEFT JOIN inventory i
USING (film_id);

# And this is other way to do it but using the ISNULL function
SELECT DISTINCT f.title, 
CASE
WHEN ISNULL(i.inventory_id) THEN "Not Available"
ELSE "Available"
END AS "status"
FROM film f
LEFT JOIN inventory i
USING (film_id);

# LAB FINISHED